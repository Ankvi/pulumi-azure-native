import * as enums from "./enums";
import * as pulumi from "@pulumi/pulumi";
/**
 * The AdapterPropertyOverrides of a cluster.
 */
export interface AdapterPropertyOverridesResponse {
    /**
     * This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
     */
    jumboPacket: string;
    /**
     * This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
     */
    networkDirect: string;
    /**
     * This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation. Expected values are 'iWARP', 'RoCEv2', 'RoCE'
     */
    networkDirectTechnology: string;
}

/**
 * Connectivity related configuration required by arc server.
 */
export interface ArcConnectivityPropertiesResponse {
    /**
     * True indicates ARC connectivity is enabled
     */
    enabled?: boolean;
    /**
     * Service configurations associated with the connectivity resource. They are only processed by the server if 'enabled' property is set to 'true'.
     */
    serviceConfigurations?: ServiceConfigurationResponse[];
}

/**
 * Desired properties of the cluster.
 */
export interface ClusterDesiredPropertiesResponse {
    /**
     * Desired level of diagnostic data emitted by the cluster.
     */
    diagnosticLevel?: string;
    /**
     * Desired state of Windows Server Subscription.
     */
    windowsServerSubscription?: string;
}

/**
 * Cluster node details.
 */
export interface ClusterNodeResponse {
    /**
     * Number of physical cores on the cluster node.
     */
    coreCount: number;
    /**
     * Edge Hardware Center Resource Id
     */
    ehcResourceId: string;
    /**
     * Id of the node in the cluster.
     */
    id: number;
    /**
     * Most recent licensing timestamp.
     */
    lastLicensingTimestamp: string;
    /**
     * Manufacturer of the cluster node hardware.
     */
    manufacturer: string;
    /**
     * Total available memory on the cluster node (in GiB).
     */
    memoryInGiB: number;
    /**
     * Model name of the cluster node hardware.
     */
    model: string;
    /**
     * Name of the cluster node.
     */
    name: string;
    /**
     * Type of the cluster node hardware.
     */
    nodeType: string;
    /**
     * OEM activation status of the node.
     */
    oemActivation: string;
    /**
     * Display version of the operating system running on the cluster node.
     */
    osDisplayVersion: string;
    /**
     * Operating system running on the cluster node.
     */
    osName: string;
    /**
     * Version of the operating system running on the cluster node.
     */
    osVersion: string;
    /**
     * Immutable id of the cluster node.
     */
    serialNumber: string;
    /**
     * State of Windows Server Subscription.
     */
    windowsServerSubscription: string;
}

/**
 * Properties reported by cluster agent.
 */
export interface ClusterReportedPropertiesResponse {
    /**
     * Unique id generated by the on-prem cluster.
     */
    clusterId: string;
    /**
     * Name of the on-prem cluster connected to this resource.
     */
    clusterName: string;
    /**
     * The node type of all the nodes of the cluster.
     */
    clusterType: string;
    /**
     * Version of the cluster software.
     */
    clusterVersion: string;
    /**
     * Level of diagnostic data emitted by the cluster.
     */
    diagnosticLevel?: string;
    /**
     * IMDS attestation status of the cluster.
     */
    imdsAttestation: string;
    /**
     * Last time the cluster reported the data.
     */
    lastUpdated: string;
    /**
     * The manufacturer of all the nodes of the cluster.
     */
    manufacturer: string;
    /**
     * List of nodes reported by the cluster.
     */
    nodes: ClusterNodeResponse[];
    /**
     * OEM activation status of the cluster.
     */
    oemActivation: string;
    /**
     * Capabilities supported by the cluster.
     */
    supportedCapabilities: string[];
}

/**
 * Properties for a particular default extension category.
 */
export interface DefaultExtensionDetailsResponse {
    /**
     * Default extension category
     */
    category: string;
    /**
     * Consent time for extension category
     */
    consentTime: string;
}

/**
 * AzureStackHCI Cluster deployment properties.
 */
export interface DeploymentClusterResponse {
    /**
     * For Azure blob service endpoint type, select either Default or Custom domain. If you selected **Custom domain, enter the domain for the blob service in this format core.windows.net.
     */
    azureServiceEndpoint?: string;
    /**
     * Specify the Azure Storage account name for cloud witness for your Azure Stack HCI cluster.
     */
    cloudAccountName?: string;
    /**
     * The cluster name provided when preparing Active Directory.
     */
    name?: string;
    /**
     * Specify the fileshare path for the local witness for your Azure Stack HCI cluster.
     */
    witnessPath?: string;
    /**
     * Use a cloud witness if you have internet access and if you use an Azure Storage account to provide a vote on cluster quorum. A cloud witness uses Azure Blob Storage to read or write a blob file and then uses it to arbitrate in split-brain resolution. Only allowed values are 'Cloud', 'FileShare'. 
     */
    witnessType?: string;
}

/**
 * Deployment Configuration
 */
export interface DeploymentConfigurationResponse {
    /**
     * Scale units will contains list of deployment data
     */
    scaleUnits: ScaleUnitsResponse[];
    /**
     * deployment template version 
     */
    version?: string;
}

/**
 * The Deployment data of AzureStackHCI Cluster.
 */
export interface DeploymentDataResponse {
    /**
     * The path to the Active Directory Organizational Unit container object prepared for the deployment. 
     */
    adouPath?: string;
    /**
     * Observability config to deploy AzureStackHCI Cluster.
     */
    cluster?: DeploymentClusterResponse;
    /**
     * FQDN to deploy cluster
     */
    domainFqdn?: string;
    /**
     * HostNetwork config to deploy AzureStackHCI Cluster.
     */
    hostNetwork?: HostNetworkResponse;
    /**
     * InfrastructureNetwork config to deploy AzureStackHCI Cluster.
     */
    infrastructureNetwork?: InfrastructureNetworkResponse[];
    /**
     * naming prefix to deploy cluster.
     */
    namingPrefix?: string;
    /**
     * Observability config to deploy AzureStackHCI Cluster.
     */
    observability?: ObservabilityResponse;
    /**
     * OptionalServices config to deploy AzureStackHCI Cluster.
     */
    optionalServices?: OptionalServicesResponse;
    /**
     * list of physical nodes config to deploy AzureStackHCI Cluster.
     */
    physicalNodes?: PhysicalNodesResponse[];
    /**
     * SDN Integration config to deploy AzureStackHCI Cluster.
     */
    sdnIntegration?: SdnIntegrationResponse;
    /**
     * secrets used for cloud deployment.
     */
    secrets?: EceDeploymentSecretsResponse[];
    /**
     * Azure keyvault endpoint. This property is deprecated from 2023-12-01-preview. Please use secrets property instead.
     */
    secretsLocation?: string;
    /**
     * SecuritySettings to deploy AzureStackHCI Cluster.
     */
    securitySettings?: DeploymentSecuritySettingsResponse;
    /**
     * Storage config to deploy AzureStackHCI Cluster.
     */
    storage?: StorageResponse;
}
/**
 * deploymentDataResponseProvideDefaults sets the appropriate defaults for DeploymentDataResponse
 */
export function deploymentDataResponseProvideDefaults(val: DeploymentDataResponse): DeploymentDataResponse {
    return {
        ...val,
        observability: (val.observability ? observabilityResponseProvideDefaults(val.observability) : undefined),
        securitySettings: (val.securitySettings ? deploymentSecuritySettingsResponseProvideDefaults(val.securitySettings) : undefined),
        storage: (val.storage ? storageResponseProvideDefaults(val.storage) : undefined),
    };
}

/**
 * The SecuritySettings of AzureStackHCI Cluster.
 */
export interface DeploymentSecuritySettingsResponse {
    /**
     * When set to true, BitLocker XTS_AES 256-bit encryption is enabled for all data-at-rest on the OS volume of your Azure Stack HCI cluster. This setting is TPM-hardware dependent. 
     */
    bitlockerBootVolume?: boolean;
    /**
     * When set to true, BitLocker XTS-AES 256-bit encryption is enabled for all data-at-rest on your Azure Stack HCI cluster shared volumes.
     */
    bitlockerDataVolumes?: boolean;
    /**
     * When set to true, Credential Guard is enabled.
     */
    credentialGuardEnforced?: boolean;
    /**
     * When set to true, the security baseline is re-applied regularly.
     */
    driftControlEnforced?: boolean;
    /**
     * By default, Secure Boot is enabled on your Azure HCI cluster. This setting is hardware dependent.
     */
    drtmProtection?: boolean;
    /**
     * By default, Hypervisor-protected Code Integrity is enabled on your Azure HCI cluster.
     */
    hvciProtection?: boolean;
    /**
     * When set to true, all the side channel mitigations are enabled
     */
    sideChannelMitigationEnforced?: boolean;
    /**
     * When set to true, cluster east-west traffic is encrypted.
     */
    smbClusterEncryption?: boolean;
    /**
     * When set to true, the SMB default instance requires sign in for the client and server services.
     */
    smbSigningEnforced?: boolean;
    /**
     * WDAC is enabled by default and limits the applications and the code that you can run on your Azure Stack HCI cluster.
     */
    wdacEnforced?: boolean;
}
/**
 * deploymentSecuritySettingsResponseProvideDefaults sets the appropriate defaults for DeploymentSecuritySettingsResponse
 */
export function deploymentSecuritySettingsResponseProvideDefaults(val: DeploymentSecuritySettingsResponse): DeploymentSecuritySettingsResponse {
    return {
        ...val,
        bitlockerBootVolume: (val.bitlockerBootVolume) ?? true,
        bitlockerDataVolumes: (val.bitlockerDataVolumes) ?? true,
        credentialGuardEnforced: (val.credentialGuardEnforced) ?? false,
        driftControlEnforced: (val.driftControlEnforced) ?? true,
        drtmProtection: (val.drtmProtection) ?? true,
        hvciProtection: (val.hvciProtection) ?? true,
        sideChannelMitigationEnforced: (val.sideChannelMitigationEnforced) ?? true,
        smbClusterEncryption: (val.smbClusterEncryption) ?? false,
        smbSigningEnforced: (val.smbSigningEnforced) ?? true,
        wdacEnforced: (val.wdacEnforced) ?? true,
    };
}

/**
 * The Step of AzureStackHCI Cluster.
 */
export interface DeploymentStepResponse {
    /**
     * Description of step.
     */
    description: string;
    /**
     * End time of step.
     */
    endTimeUtc: string;
    /**
     * List of exceptions in AzureStackHCI Cluster Deployment.
     */
    exception: string[];
    /**
     * FullStepIndex of step.
     */
    fullStepIndex: string;
    /**
     * Name of step.
     */
    name: string;
    /**
     * Start time of step.
     */
    startTimeUtc: string;
    /**
     * Status of step. Allowed values are 'Error', 'Success', 'InProgress'
     */
    status: string;
    /**
     * List of nested steps of AzureStackHCI Cluster Deployment.
     */
    steps: DeploymentStepResponse[];
}

/**
 * The device Configuration for edge device.
 */
export interface DeviceConfigurationResponse {
    /**
     * Device metadata details.
     */
    deviceMetadata?: string;
    /**
     * NIC Details of device
     */
    nicDetails?: NicDetailResponse[];
}

/**
 * The ECE action plan deployment status for AzureStackHCI Cluster.
 */
export interface EceActionStatusResponse {
    /**
     * Status of ECE action AzureStackHCI Cluster Deployment.
     */
    status: string;
    /**
     * List of steps of AzureStackHCI Cluster Deployment.
     */
    steps: DeploymentStepResponse[];
}

/**
 * Protected parameters list stored in keyvault.
 */
export interface EceDeploymentSecretsResponse {
    /**
     * Secret name expected for Enterprise Cloud Engine (ECE) deployment.
     */
    eceSecretName?: string;
    /**
     * Secret URI stored in keyvault.
     */
    secretLocation?: string;
    /**
     * Secret name stored in keyvault.
     */
    secretName?: string;
}

/**
 * The DeploymentStatus of AzureStackHCI Cluster.
 */
export interface EceReportedPropertiesResponse {
    /**
     * Deployment status of AzureStackHCI Cluster Deployment.
     */
    deploymentStatus: EceActionStatusResponse;
    /**
     * validation status of AzureStackHCI Cluster Deployment.
     */
    validationStatus: EceActionStatusResponse;
}

/**
 * The resource management error additional info.
 */
export interface ErrorAdditionalInfoResponse {
    /**
     * The additional info.
     */
    info: any;
    /**
     * The additional info type.
     */
    type: string;
}

/**
 * The error detail.
 */
export interface ErrorDetailResponse {
    /**
     * The error additional info.
     */
    additionalInfo: ErrorAdditionalInfoResponse[];
    /**
     * The error code.
     */
    code: string;
    /**
     * The error details.
     */
    details: ErrorDetailResponse[];
    /**
     * Exception details while installing extension.
     */
    exception?: string;
    /**
     * The error message.
     */
    message: string;
    /**
     * The error target.
     */
    target: string;
}

/**
 * The complex type of the extended location.
 */
export interface ExtendedLocationResponse {
    /**
     * The name of the extended location.
     */
    name?: string;
    /**
     * The type of the extended location.
     */
    type?: string;
}

/**
 * Describes the Extension Instance View.
 */
export interface ExtensionInstanceViewResponse {
    /**
     * The extension name.
     */
    name?: string;
    /**
     * Instance view status.
     */
    status?: ExtensionInstanceViewResponseStatus;
    /**
     * Specifies the type of the extension; an example is "MicrosoftMonitoringAgent".
     */
    type?: string;
    /**
     * Specifies the version of the script handler.
     */
    typeHandlerVersion?: string;
}

/**
 * Instance view status.
 */
export interface ExtensionInstanceViewResponseStatus {
    /**
     * The status code.
     */
    code?: string;
    /**
     * The short localizable label for the status.
     */
    displayStatus?: string;
    /**
     * The level code.
     */
    level?: string;
    /**
     * The detailed status message, including for alerts and error messages.
     */
    message?: string;
    /**
     * The time of the status.
     */
    time?: string;
}

/**
 * Extensions details for edge device.
 */
export interface ExtensionProfileResponse {
    /**
     * List of Arc extensions installed on edge device.
     */
    extensions: ExtensionResponse[];
}

/**
 * Arc extension installed on edge device.
 */
export interface ExtensionResponse {
    /**
     * Error details while installing Arc extension.
     */
    errorDetails: ErrorDetailResponse[];
    /**
     * Arc extension name installed on edge device.
     */
    extensionName: string;
    /**
     * Arc Extension Azure resource id.
     */
    extensionResourceId: string;
    /**
     * Extension managed by user or Azure.
     */
    managedBy: string;
    /**
     * Arc extension state from arc machine extension.
     */
    state: string;
    /**
     * Extension version installed.
     */
    typeHandlerVersion: string;
}
/**
 * extensionResponseProvideDefaults sets the appropriate defaults for ExtensionResponse
 */
export function extensionResponseProvideDefaults(val: ExtensionResponse): ExtensionResponse {
    return {
        ...val,
        managedBy: (val.managedBy) ?? "Azure",
    };
}

/**
 * This is the gallery image definition identifier.
 */
export interface GalleryImageIdentifierResponse {
    /**
     * The name of the gallery image definition offer.
     */
    offer: string;
    /**
     * The name of the gallery image definition publisher.
     */
    publisher: string;
    /**
     * The name of the gallery image definition SKU.
     */
    sku: string;
}

/**
 * The download status of the gallery image
 */
export interface GalleryImageStatusDownloadStatusResponse {
    /**
     * The downloaded sized of the image in MB
     */
    downloadSizeInMB?: number;
}

/**
 * The status of the operation performed on the gallery image
 */
export interface GalleryImageStatusProvisioningStatusResponse {
    /**
     * The ID of the operation performed on the gallery image
     */
    operationId?: string;
    /**
     * The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]
     */
    status: string;
}

/**
 * The observed state of gallery images
 */
export interface GalleryImageStatusResponse {
    /**
     * The download status of the gallery image
     */
    downloadStatus?: GalleryImageStatusDownloadStatusResponse;
    /**
     * GalleryImage provisioning error code
     */
    errorCode?: string;
    /**
     * Descriptive error message
     */
    errorMessage?: string;
    /**
     * The progress of the operation in percentage
     */
    progressPercentage?: number;
    /**
     * provisioning status of the gallery image
     */
    provisioningStatus?: GalleryImageStatusProvisioningStatusResponse;
}

/**
 * Specifies information about the gallery image version that you want to create or update.
 */
export interface GalleryImageVersionResponse {
    /**
     * This is the version of the gallery image.
     */
    name?: string;
    /**
     * This is the storage profile of a Gallery Image Version.
     */
    storageProfile: GalleryImageVersionStorageProfileResponse;
}

/**
 * This is the storage profile of a Gallery Image Version.
 */
export interface GalleryImageVersionStorageProfileResponse {
    /**
     * This is the OS disk image.
     */
    osDiskImage?: GalleryOSDiskImageResponse;
}

/**
 * This is the OS disk image.
 */
export interface GalleryOSDiskImageResponse {
    /**
     * This property indicates the size of the VHD to be created.
     */
    sizeInMB: number;
}

/**
 * Defines the status of a guest agent installation.
 */
export interface GuestAgentInstallStatusResponse {
    /**
     * The hybrid machine agent full version.
     */
    agentVersion: string;
    /**
     * Details about the error state.
     */
    errorDetails: ErrorDetailResponse[];
    /**
     * The time of the last status change.
     */
    lastStatusChange: string;
    /**
     * The installation status of the hybrid machine agent installation.
     */
    status: string;
    /**
     * Specifies the VM's unique SMBIOS ID.
     */
    vmUuid: string;
}

/**
 * Defines the resource properties.
 */
export interface GuestAgentProfileResponse {
    /**
     * The hybrid machine agent full version.
     */
    agentVersion: string;
    /**
     * Details about the error state.
     */
    errorDetails: ErrorDetailResponse[];
    /**
     * The time of the last status change.
     */
    lastStatusChange: string;
    /**
     * The status of the hybrid machine agent.
     */
    status: string;
    /**
     * Specifies the VM's unique SMBIOS ID.
     */
    vmUuid: string;
}

/**
 * Username / Password Credentials to connect to guest.
 */
export interface GuestCredentialResponse {
    /**
     * The username to connect with the guest.
     */
    username?: string;
}

/**
 * Represents the properties of an HCI Collect Log job.
 */
export interface HciCollectLogJobPropertiesResponse {
    /**
     * Deployment mode to trigger job.
     */
    deploymentMode?: string;
    /**
     * The UTC date and time at which the job completed.
     */
    endTimeUtc: string;
    /**
     * From date for log collection.
     */
    fromDate: string;
    /**
     * Unique, immutable job id.
     */
    jobId: string;
    /**
     * Job Type supported.
     * Expected value is 'CollectLog'.
     */
    jobType: "CollectLog";
    /**
     * To date for log collection.
     */
    lastLogGenerated: string;
    /**
     * Job provisioning state
     */
    provisioningState: string;
    /**
     * log collection job reported properties.
     */
    reportedProperties: LogCollectionReportedPropertiesResponse;
    /**
     * The UTC date and time at which the job started.
     */
    startTimeUtc: string;
    /**
     * Status of Edge device job.
     */
    status: string;
    /**
     * To date for log collection.
     */
    toDate: string;
}

/**
 * properties for Arc-enabled edge device with HCI OS.
 */
export interface HciEdgeDevicePropertiesResponse {
    /**
     * Device Configuration
     */
    deviceConfiguration?: DeviceConfigurationResponse;
    /**
     * Provisioning state of edgeDevice resource
     */
    provisioningState: string;
    /**
     * The instance view of all current configurations on HCI device.
     */
    reportedProperties: HciReportedPropertiesResponse;
}

/**
 * The network profile of a device.
 */
export interface HciNetworkProfileResponse {
    /**
     * HostNetwork config to deploy AzureStackHCI Cluster.
     */
    hostNetwork: HostNetworkResponse;
    /**
     * List of NIC Details of device.
     */
    nicDetails: HciNicDetailResponse[];
    /**
     * List of switch details for edge device.
     */
    switchDetails: SwitchDetailResponse[];
}

/**
 * The NIC Detail of a device.
 */
export interface HciNicDetailResponse {
    /**
     * Adapter Name of NIC
     */
    adapterName: string;
    /**
     * Component Id of NIC
     */
    componentId: string;
    /**
     * Default Gateway of NIC
     */
    defaultGateway: string;
    /**
     * Default Isolation of Management NIC
     */
    defaultIsolationId: string;
    /**
     * DNS Servers for NIC
     */
    dnsServers: string[];
    /**
     * Driver Version of NIC
     */
    driverVersion: string;
    /**
     * Interface Description of NIC
     */
    interfaceDescription: string;
    /**
     * Subnet Mask of NIC
     */
    ip4Address: string;
    /**
     * MAC address information of NIC.
     */
    macAddress: string;
    /**
     * The status of NIC, up, disconnected.
     */
    nicStatus: string;
    /**
     * The type of NIC, physical, virtual, management.
     */
    nicType: string;
    /**
     * The slot attached to the NIC.
     */
    slot: string;
    /**
     * Subnet Mask of NIC
     */
    subnetMask: string;
    /**
     * The switch attached to the NIC, if any.
     */
    switchName: string;
    /**
     * The VLAN ID of the physical NIC.
     */
    vlanId: string;
}

/**
 * OS configurations for HCI device.
 */
export interface HciOsProfileResponse {
    /**
     * Version of assembly present on device
     */
    assemblyVersion: string;
    /**
     * The boot type of the device. e.g. UEFI, Legacy etc
     */
    bootType: string;
}

/**
 * Represents the properties of a remote support job for HCI.
 */
export interface HciRemoteSupportJobPropertiesResponse {
    /**
     * Remote support access level.
     */
    accessLevel: string;
    /**
     * Deployment mode to trigger job.
     */
    deploymentMode?: string;
    /**
     * The UTC date and time at which the job completed.
     */
    endTimeUtc: string;
    /**
     * Remote support expiration timestamp.
     */
    expirationTimestamp: string;
    /**
     * Unique, immutable job id.
     */
    jobId: string;
    /**
     * Job Type supported.
     * Expected value is 'RemoteSupport'.
     */
    jobType: "RemoteSupport";
    /**
     * Job provisioning state
     */
    provisioningState: string;
    /**
     * log collection job reported properties.
     */
    reportedProperties: RemoteSupportJobReportedPropertiesResponse;
    /**
     * The UTC date and time at which the job started.
     */
    startTimeUtc: string;
    /**
     * Status of Edge device job.
     */
    status: string;
    /**
     * Remote support type.
     */
    type: string;
}

/**
 * The device Configuration for HCI device.
 */
export interface HciReportedPropertiesResponse {
    /**
     * edge device state.
     */
    deviceState: string;
    /**
     * Extensions details for edge device.
     */
    extensionProfile: ExtensionProfileResponse;
    /**
     * HCI device network information.
     */
    networkProfile: HciNetworkProfileResponse;
    /**
     * HCI device OS specific information.
     */
    osProfile: HciOsProfileResponse;
    /**
     * Solution builder extension (SBE) deployment package information.
     */
    sbeDeploymentPackageInfo: SbeDeploymentPackageInfoResponse;
}

/**
 * The HostNetwork of a cluster.
 */
export interface HostNetworkResponse {
    /**
     * Optional parameter required only for 3 Nodes Switchless deployments. This allows users to specify IPs and Mask for Storage NICs when Network ATC is not assigning the IPs for storage automatically.
     */
    enableStorageAutoIp: boolean;
    /**
     * The network intents assigned to the network reference pattern used for the deployment. Each intent will define its own name, traffic type, adapter names, and overrides as recommended by your OEM.
     */
    intents: IntentsResponse[];
    /**
     * Defines how the storage adapters between nodes are connected either switch or switch less.
     */
    storageConnectivitySwitchless: boolean;
    /**
     * List of StorageNetworks config to deploy AzureStackHCI Cluster.
     */
    storageNetworks: StorageNetworksResponse[];
}

/**
 * HTTP Proxy configuration for the VM.
 */
export interface HttpProxyConfigurationResponse {
    /**
     * The HTTP proxy server endpoint to use.
     */
    httpProxy?: string;
    /**
     * The HTTPS proxy server endpoint to use.
     */
    httpsProxy?: string;
    /**
     * The endpoints that should not go through proxy.
     */
    noProxy?: string[];
    /**
     * Alternative CA cert to use for connecting to proxy servers.
     */
    trustedCa?: string;
}

/**
 * InterfaceIPConfigurationPropertiesFormat properties of IP configuration.
 */
export interface IPConfigurationPropertiesResponse {
    /**
     * Gateway for network interface
     */
    gateway: string;
    /**
     * prefixLength for network interface
     */
    prefixLength: string;
    /**
     * PrivateIPAddress - Private IP address of the IP configuration.
     */
    privateIPAddress?: string;
    /**
     * Subnet - Name of Subnet bound to the IP configuration.
     */
    subnet?: LogicalNetworkArmReferenceResponse;
}

/**
 * InterfaceIPConfiguration IPConfiguration in a network interface.
 */
export interface IPConfigurationResponse {
    /**
     * Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * InterfaceIPConfigurationPropertiesFormat properties of IP configuration.
     */
    properties?: IPConfigurationPropertiesResponse;
}

/**
 * IP Pool info
 */
export interface IPPoolInfoResponse {
    /**
     * Number of IP addresses available in the IP Pool
     */
    available: string;
    /**
     * Number of IP addresses allocated from the IP Pool
     */
    used: string;
}

/**
 * Describes IPPool
 */
export interface IPPoolResponse {
    /**
     * End of the IP address pool
     */
    end?: string;
    /**
     * IPPool info
     */
    info?: IPPoolInfoResponse;
    /**
     * Type of the IP Pool [vm, vippool]
     */
    ipPoolType?: string;
    /**
     * Name of the IP-Pool
     */
    name?: string;
    /**
     * Start of the IP address pool
     */
    start?: string;
}

/**
 * Identity for the resource.
 */
export interface IdentityResponse {
    /**
     * The principal ID of resource identity.
     */
    principalId: string;
    /**
     * The tenant ID of resource.
     */
    tenantId: string;
    /**
     * The identity type.
     */
    type?: string;
}

/**
 * The ARM ID for a Gallery Image.
 */
export interface ImageArmReferenceResponse {
    /**
     * The ARM ID for an image resource used by the virtual machine instance.
     */
    id?: string;
}

/**
 * The InfrastructureNetwork of a AzureStackHCI Cluster.
 */
export interface InfrastructureNetworkResponse {
    /**
     * IPv4 address of the DNS servers in your environment.
     */
    dnsServers?: string[];
    /**
     * Default gateway that should be used for the provided IP address space.
     */
    gateway?: string;
    /**
     * Range of IP addresses from which addresses are allocated for nodes within a subnet.
     */
    ipPools?: IpPoolsResponse[];
    /**
     * Subnet mask that matches the provided IP address space.
     */
    subnetMask?: string;
    /**
     * Allows customers to use DHCP for Hosts and Cluster IPs. If not declared, the deployment will default to static IPs. When true, GW and DNS servers are not required
     */
    useDhcp?: boolean;
}

/**
 * Instance view status.
 */
export interface InstanceViewStatusResponse {
    /**
     * The status code.
     */
    code?: string;
    /**
     * The short localizable label for the status.
     */
    displayStatus?: string;
    /**
     * The level code.
     */
    level?: string;
    /**
     * The detailed status message, including for alerts and error messages.
     */
    message?: string;
    /**
     * The time of the status.
     */
    time?: string;
}

/**
 * The Intents of a cluster.
 */
export interface IntentsResponse {
    /**
     * Array of network interfaces used for the network intent.
     */
    adapter?: string[];
    /**
     * Set Adapter PropertyOverrides for cluster.
     */
    adapterPropertyOverrides: AdapterPropertyOverridesResponse;
    /**
     * Array of adapters used for the network intent.
     */
    intentAdapters: string[];
    /**
     * Name of the network intent you wish to create.
     */
    intentName: string;
    /**
     * IntentType for host network intent.
     */
    intentType: number;
    /**
     * IsComputeIntentSet for host network intent.
     */
    isComputeIntentSet: boolean;
    /**
     * IsManagementIntentSet for host network intent.
     */
    isManagementIntentSet: boolean;
    /**
     * IsNetworkIntentType for host network intent.
     */
    isNetworkIntentType: boolean;
    /**
     * IntentType for host network intent.
     */
    isOnlyStorage: boolean;
    /**
     * IsOnlyStretch for host network intent.
     */
    isOnlyStretch: boolean;
    /**
     * IsStorageIntentSet for host network intent.
     */
    isStorageIntentSet: boolean;
    /**
     * IsStretchIntentSet for host network intent.
     */
    isStretchIntentSet: boolean;
    /**
     * Name of the network intent you wish to create.
     */
    name?: string;
    /**
     * This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
     */
    overrideAdapterProperty: boolean;
    /**
     * This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
     */
    overrideQosPolicy: boolean;
    /**
     * This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
     */
    overrideVirtualSwitchConfiguration: boolean;
    /**
     * Set QoS PolicyOverrides for cluster.
     */
    qosPolicyOverrides: QosPolicyOverridesResponse;
    /**
     * Scope for host network intent.
     */
    scope: number;
    /**
     * List of network traffic types. Only allowed values are 'Compute', 'Storage', 'Management'.
     */
    trafficType?: string[];
    /**
     * Set virtualSwitch ConfigurationOverrides for cluster.
     */
    virtualSwitchConfigurationOverrides: VirtualSwitchConfigurationOverridesResponse;
}

/**
 * DNS Settings of the interface
 */
export interface InterfaceDNSSettingsResponse {
    /**
     * List of DNS server IP Addresses for the interface
     */
    dnsServers?: string[];
}

/**
 * The dnsServers of a device.
 */
export interface IpPoolsResponse {
    /**
     * Ending IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
     */
    endingAddress?: string;
    /**
     * Starting IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
     */
    startingAddress?: string;
}

/**
 * Attestation configurations for isolated VM (e.g. TVM, CVM) of the cluster.
 */
export interface IsolatedVmAttestationConfigurationResponse {
    /**
     * Fully qualified Azure resource id of the Microsoft Azure attestation resource associated with this cluster.
     */
    attestationResourceId: string;
    /**
     * Region specific endpoint for Microsoft Azure Attestation service for the cluster
     */
    attestationServiceEndpoint: string;
    /**
     * Region specific endpoint for relying party service.
     */
    relyingPartyServiceEndpoint: string;
}

/**
 * Log Collection Error details of the cluster.
 */
export interface LogCollectionErrorResponse {
    /**
     * Error Code of the log collection
     */
    errorCode: string;
    /**
     * Error Message of the log collection
     */
    errorMessage: string;
}

/**
 * Represents a session for collecting logs from an edge device.
 */
export interface LogCollectionJobSessionResponse {
    /**
     * A unique identifier for correlating this log collection session with other operations or sessions.
     */
    correlationId: string;
    /**
     * The timestamp when log collection ended, in ISO 8601 format.
     */
    endTime: string;
    /**
     * The size of the collected logs in bytes.
     */
    logSize: number;
    /**
     * The timestamp when log collection started, in ISO 8601 format.
     */
    startTime: string;
    /**
     * The status of the log collection session.
     */
    status: string;
    /**
     * The total time logs were collected for, in ISO 8601 duration format.
     */
    timeCollected: string;
}

/**
 * Log Collection properties of the cluster.
 */
export interface LogCollectionPropertiesResponse {
    /**
     * From DateTimeStamp from when logs need to be connected
     */
    fromDate: string;
    /**
     * Recent DateTimeStamp where logs are successfully generated
     */
    lastLogGenerated: string;
    logCollectionSessionDetails: LogCollectionSessionResponse[];
    /**
     * To DateTimeStamp till when logs need to be connected
     */
    toDate: string;
}

/**
 * Represents the reported properties of a log collection job.
 */
export interface LogCollectionReportedPropertiesResponse {
    /**
     * Deployment status of job.
     */
    deploymentStatus: EceActionStatusResponse;
    /**
     * Details of the log collection session.
     */
    logCollectionSessionDetails: LogCollectionJobSessionResponse[];
    /**
     * The percentage of the job that is complete.
     */
    percentComplete: number;
    /**
     * Validation status of job.
     */
    validationStatus: EceActionStatusResponse;
}

/**
 * Log Collection Session details of the cluster.
 */
export interface LogCollectionSessionResponse {
    /**
     * CorrelationId of the log collection
     */
    correlationId: string;
    /**
     * End Time of the logs when it was collected
     */
    endTimeCollected: string;
    /**
     * Log Collection Error details of the cluster.
     */
    logCollectionError: LogCollectionErrorResponse;
    /**
     * LogCollection job type
     */
    logCollectionJobType: string;
    /**
     * LogCollection status
     */
    logCollectionStatus: string;
    /**
     * End Time of the logs when it was collected
     */
    logEndTime: string;
    /**
     * Size of the logs collected
     */
    logSize: number;
    /**
     * Start Time of the logs when it was collected
     */
    logStartTime: string;
    /**
     * Duration of logs collected
     */
    timeCollected: string;
}

/**
 * The ARM ID for a Logical Network.
 */
export interface LogicalNetworkArmReferenceResponse {
    /**
     * The ARM ID for a Logical Network.
     */
    id?: string;
}

/**
 * DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
 */
export interface LogicalNetworkPropertiesDhcpOptionsResponse {
    /**
     * The list of DNS servers IP addresses.
     */
    dnsServers?: string[];
}

/**
 * Describes the status of the provisioning.
 */
export interface LogicalNetworkStatusProvisioningStatusResponse {
    /**
     * The ID of the operation performed on the logical network
     */
    operationId?: string;
    /**
     * The status of the operation performed on the logical network [Succeeded, Failed, InProgress]
     */
    status: string;
}

/**
 * The observed state of logical networks
 */
export interface LogicalNetworkStatusResponse {
    /**
     * LogicalNetwork provisioning error code
     */
    errorCode?: string;
    /**
     * Descriptive error message
     */
    errorMessage?: string;
    /**
     * Logical network provisioning status
     */
    provisioningStatus?: LogicalNetworkStatusProvisioningStatusResponse;
}

/**
 * Instance view status.
 */
export interface MachineExtensionInstanceViewResponseStatus {
    /**
     * The status code.
     */
    code: string;
    /**
     * The short localizable label for the status.
     */
    displayStatus: string;
    /**
     * The level code.
     */
    level: string;
    /**
     * The detailed status message, including for alerts and error messages.
     */
    message: string;
    /**
     * The time of the status.
     */
    time: string;
}

/**
 * The machine extension instance view.
 */
export interface MachineExtensionPropertiesResponseInstanceView {
    /**
     * The machine extension name.
     */
    name: string;
    /**
     * Instance view status.
     */
    status?: MachineExtensionInstanceViewResponseStatus;
    /**
     * Specifies the type of the extension; an example is "CustomScriptExtension".
     */
    type: string;
    /**
     * Specifies the version of the script handler.
     */
    typeHandlerVersion: string;
}

/**
 * Managed service identity (system assigned and/or user assigned identities)
 */
export interface ManagedServiceIdentityResponse {
    /**
     * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
     */
    principalId: string;
    /**
     * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
     */
    tenantId: string;
    /**
     * Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
     */
    type: string;
    /**
     * The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
     */
    userAssignedIdentities?: {[key: string]: UserAssignedIdentityResponse};
}

/**
 * The download status of the gallery image
 */
export interface MarketplaceGalleryImageStatusDownloadStatusResponse {
    /**
     * The downloaded sized of the image in MB
     */
    downloadSizeInMB?: number;
}

/**
 * Marketplace GalleryImage provisioning status
 */
export interface MarketplaceGalleryImageStatusProvisioningStatusResponse {
    /**
     * The ID of the operation performed on the gallery image
     */
    operationId?: string;
    /**
     * The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]
     */
    status: string;
}

/**
 * The observed state of marketplace gallery images
 */
export interface MarketplaceGalleryImageStatusResponse {
    /**
     * The download status of the gallery image
     */
    downloadStatus?: MarketplaceGalleryImageStatusDownloadStatusResponse;
    /**
     * MarketplaceGalleryImage provisioning error code
     */
    errorCode?: string;
    /**
     * Descriptive error message
     */
    errorMessage?: string;
    /**
     * The progress of the operation in percentage
     */
    progressPercentage?: number;
    /**
     * Provisioning status of marketplace gallery image
     */
    provisioningStatus?: MarketplaceGalleryImageStatusProvisioningStatusResponse;
}

/**
 * network controller config for SDN Integration to deploy AzureStackHCI Cluster.
 */
export interface NetworkControllerResponse {
    /**
     * macAddressPoolStart of network controller used for SDN Integration.
     */
    macAddressPoolStart?: string;
    /**
     * macAddressPoolStop of network controller used for SDN Integration.
     */
    macAddressPoolStop?: string;
    /**
     * NetworkVirtualizationEnabled of network controller used for SDN Integration.
     */
    networkVirtualizationEnabled?: boolean;
}

/**
 * The ARM ID for a Network Interface.
 */
export interface NetworkInterfaceArmReferenceResponse {
    /**
     * The ARM ID for a Network Interface.
     */
    id?: string;
}

/**
 * Network interface provisioning status
 */
export interface NetworkInterfaceStatusProvisioningStatusResponse {
    /**
     * The ID of the operation performed on the network interface
     */
    operationId?: string;
    /**
     * The status of the operation performed on the network interface [Succeeded, Failed, InProgress]
     */
    status: string;
}

/**
 * The observed state of network interfaces
 */
export interface NetworkInterfaceStatusResponse {
    /**
     * NetworkInterface provisioning error code
     */
    errorCode?: string;
    /**
     * Descriptive error message
     */
    errorMessage?: string;
    /**
     * Network interface provisioning status
     */
    provisioningStatus?: NetworkInterfaceStatusProvisioningStatusResponse;
}

/**
 * The ARM ID for a Network Security Group.
 */
export interface NetworkSecurityGroupArmReferenceResponse {
    /**
     * The ARM ID for a Network Security Group.
     */
    id?: string;
}

/**
 * network security group provisioning status
 */
export interface NetworkSecurityGroupStatusProvisioningStatusResponse {
    /**
     * The ID of the operation performed on the network security group
     */
    operationId?: string;
    /**
     * The status of the operation performed on the network security group [Succeeded, Failed, InProgress]
     */
    status: string;
}

/**
 * The observed state of network security group
 */
export interface NetworkSecurityGroupStatusResponse {
    /**
     * NetworkSecurityGroup provisioning error code
     */
    errorCode?: string;
    /**
     * Descriptive error message
     */
    errorMessage?: string;
    /**
     * network security group provisioning status
     */
    provisioningStatus?: NetworkSecurityGroupStatusProvisioningStatusResponse;
}

/**
 * The NIC Detail of a device.
 */
export interface NicDetailResponse {
    /**
     * Adapter Name of NIC
     */
    adapterName?: string;
    /**
     * Component Id of NIC
     */
    componentId?: string;
    /**
     * Default Gateway of NIC
     */
    defaultGateway?: string;
    /**
     * Default Isolation of Management NIC
     */
    defaultIsolationId?: string;
    /**
     * DNS Servers for NIC
     */
    dnsServers?: string[];
    /**
     * Driver Version of NIC
     */
    driverVersion?: string;
    /**
     * Interface Description of NIC
     */
    interfaceDescription?: string;
    /**
     * Subnet Mask of NIC
     */
    ip4Address?: string;
    /**
     * Subnet Mask of NIC
     */
    subnetMask?: string;
}

/**
 * The Observability of AzureStackHCI Cluster.
 */
export interface ObservabilityResponse {
    /**
     * When set to true, collects log data to facilitate quicker issue resolution.
     */
    episodicDataUpload?: boolean;
    /**
     * Location of your cluster. The log and diagnostic data is sent to the appropriate diagnostics servers depending upon where your cluster resides. Setting this to false results in all data sent to Microsoft to be stored outside of the EU.
     */
    euLocation?: boolean;
    /**
     * Enables telemetry data to be sent to Microsoft
     */
    streamingDataClient?: boolean;
}
/**
 * observabilityResponseProvideDefaults sets the appropriate defaults for ObservabilityResponse
 */
export function observabilityResponseProvideDefaults(val: ObservabilityResponse): ObservabilityResponse {
    return {
        ...val,
        episodicDataUpload: (val.episodicDataUpload) ?? true,
        euLocation: (val.euLocation) ?? false,
        streamingDataClient: (val.streamingDataClient) ?? true,
    };
}

/**
 * The OptionalServices of AzureStackHCI Cluster.
 */
export interface OptionalServicesResponse {
    /**
     * The name of custom location.
     */
    customLocation?: string;
}

/**
 * Status of Arc Extension for a particular node in HCI Cluster.
 */
export interface PerNodeExtensionStateResponse {
    /**
     * Fully qualified resource ID for the particular Arc Extension on this node.
     */
    extension: string;
    /**
     * The extension instance view.
     */
    instanceView: ExtensionInstanceViewResponse;
    /**
     * Name of the node in HCI Cluster.
     */
    name: string;
    /**
     * State of Arc Extension in this node.
     */
    state: string;
    /**
     * Specifies the version of the script handler.
     */
    typeHandlerVersion: string;
}

/**
 * Remote Support Node Session Details on the Node.
 */
export interface PerNodeRemoteSupportSessionResponse {
    /**
     * Remote Support Access Level
     */
    accessLevel: string;
    /**
     * Duration of Remote Support Enablement
     */
    duration: number;
    /**
     * Name of the node
     */
    nodeName: string;
    /**
     * Remote Support Session EndTime on the Node
     */
    sessionEndTime: string;
    /**
     * Remote Support Session StartTime on the Node
     */
    sessionStartTime: string;
}

/**
 * Status of Arc agent for a particular node in HCI Cluster.
 */
export interface PerNodeStateResponse {
    /**
     * Fully qualified resource ID for the Arc agent of this node.
     */
    arcInstance: string;
    /**
     * The service principal id of the arc for server node
     */
    arcNodeServicePrincipalObjectId: string;
    /**
     * Name of the Node in HCI Cluster
     */
    name: string;
    /**
     * State of Arc agent in this node.
     */
    state: string;
}

/**
 * The PhysicalNodes of a cluster.
 */
export interface PhysicalNodesResponse {
    /**
     * The IPv4 address assigned to each physical server on your Azure Stack HCI cluster.
     */
    ipv4Address?: string;
    /**
     * NETBIOS name of each physical server on your Azure Stack HCI cluster.
     */
    name?: string;
}

/**
 * The QoSPolicyOverrides of a cluster.
 */
export interface QosPolicyOverridesResponse {
    /**
     * This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
     */
    bandwidthPercentageSMB?: string;
    /**
     * This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
     */
    priorityValue8021ActionCluster?: string;
    /**
     * This parameter should only be modified based on your OEM guidance. Do not modify this parameter without OEM validation.
     */
    priorityValue8021ActionSMB?: string;
}

/**
 * Represents the settings of a remote support node.
 */
export interface RemoteSupportJobNodeSettingsResponse {
    /**
     * The error message, if any, from the last connection attempt.
     */
    connectionErrorMessage: string;
    /**
     * The current connection status of the remote support session.
     */
    connectionStatus: string;
    /**
     * The timestamp when the node settings were created, in UTC.
     */
    createdAt: string;
    /**
     * The state of the remote support node.
     */
    state: string;
    /**
     * The timestamp when the node settings were last updated, in UTC.
     */
    updatedAt: string;
}

/**
 * Represents the reported properties of a remote support job.
 */
export interface RemoteSupportJobReportedPropertiesResponse {
    /**
     * Deployment status of job.
     */
    deploymentStatus: EceActionStatusResponse;
    /**
     * Optional settings for configuring the node for remote support.
     */
    nodeSettings: RemoteSupportJobNodeSettingsResponse;
    /**
     * The percentage of the job that is complete.
     */
    percentComplete: number;
    /**
     * Details of the remote support session.
     */
    sessionDetails: RemoteSupportSessionResponse[];
    /**
     * Validation status of job.
     */
    validationStatus: EceActionStatusResponse;
}

/**
 * Remote Support Node Settings of the cluster.
 */
export interface RemoteSupportNodeSettingsResponse {
    /**
     * Arc ResourceId of the Node
     */
    arcResourceId: string;
    /**
     * Remote Support Access Connection Error Message on the Node
     */
    connectionErrorMessage: string;
    /**
     * Remote Support Access Connection Status on the Node
     */
    connectionStatus: string;
    /**
     * Remote Support Enablement Request Created TimeStamp on the Node
     */
    createdAt: string;
    /**
     * Remote Support Access Connection State on the Node
     */
    state: string;
    /**
     * Remote Support Transcript location on the node
     */
    transcriptLocation: string;
    /**
     * Remote Support Enablement Request Updated TimeStamp on the Node
     */
    updatedAt: string;
}

/**
 * Remote Support properties of the cluster.
 */
export interface RemoteSupportPropertiesResponse {
    /**
     * Remote Support Access Level
     */
    accessLevel: string;
    /**
     * Expiration DateTimeStamp when Remote Support Access will be expired
     */
    expirationTimeStamp: string;
    remoteSupportNodeSettings: RemoteSupportNodeSettingsResponse[];
    remoteSupportSessionDetails: PerNodeRemoteSupportSessionResponse[];
    /**
     * Remote Support Type for cluster
     */
    remoteSupportType: string;
}

/**
 * Represents a remote support session.
 */
export interface RemoteSupportSessionResponse {
    /**
     * The level of access granted during the remote support session.
     */
    accessLevel: string;
    /**
     * The end time of the remote support session, in UTC.
     */
    sessionEndTime: string;
    /**
     * Unique session Id.
     */
    sessionId: string;
    /**
     * The start time of the remote support session, in UTC.
     */
    sessionStartTime: string;
    /**
     * The location where the session transcript is stored.
     */
    transcriptLocation: string;
}

/**
 * Route - Route resource.
 */
export interface RouteResponse {
    /**
     * The destination CIDR to which the route applies.
     */
    addressPrefix?: string;
    /**
     * Name - name of the subnet
     */
    name?: string;
    /**
     * The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
     */
    nextHopIpAddress?: string;
}

/**
 * Route table resource.
 */
export interface RouteTableResponse {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    etag: string;
    /**
     * Resource name.
     */
    name: string;
    /**
     * Collection of routes contained within a route table.
     */
    routes?: RouteResponse[];
    /**
     * Resource type.
     */
    type: string;
}

/**
 * secrets used for solution builder extension (SBE) partner extensibility.
 */
export interface SbeCredentialsResponse {
    /**
     * secret name expected for Enterprise Cloud Engine (ECE).
     */
    eceSecretName?: string;
    /**
     * secret URI stored in keyvault.
     */
    secretLocation?: string;
    /**
     * secret name stored in keyvault.
     */
    secretName?: string;
}

/**
 * Solution builder extension (SBE) package and manifest information for the solution builder extension staged for AzureStackHCI cluster deployment.
 */
export interface SbeDeploymentInfoResponse {
    /**
     * SBE family name.
     */
    family?: string;
    /**
     * SBE manifest publisher.
     */
    publisher?: string;
    /**
     * SBE Manifest Creation Date.
     */
    sbeManifestCreationDate?: string;
    /**
     * SBE Manifest Source.
     */
    sbeManifestSource?: string;
    /**
     * SBE package version.
     */
    version?: string;
}

/**
 * Solution builder extension (SBE) deployment package information.
 */
export interface SbeDeploymentPackageInfoResponse {
    /**
     * SBE deployment validation code.
     */
    code: string;
    /**
     * A detailed message that explains the SBE package validation result.
     */
    message: string;
    /**
     * This represents discovered update results for matching updates and store it as SBE manifest.
     */
    sbeManifest: string;
}

/**
 * The solution builder extension (SBE) partner deployment info for cluster.
 */
export interface SbePartnerInfoResponse {
    /**
     * SBE credentials list for AzureStackHCI cluster deployment.
     */
    credentialList?: SbeCredentialsResponse[];
    /**
     * List of SBE partner properties for AzureStackHCI cluster deployment.
     */
    partnerProperties?: SbePartnerPropertiesResponse[];
    /**
     * SBE package and manifest information for the solution Builder Extension staged for AzureStackHCI cluster deployment.
     */
    sbeDeploymentInfo?: SbeDeploymentInfoResponse;
}

/**
 * Solution builder extension (SBE) partner properties object.
 */
export interface SbePartnerPropertiesResponse {
    /**
     * SBE partner property name.
     */
    name?: string;
    /**
     * SBE partner property value.
     */
    value?: string;
}

/**
 * Scale units will contains list of deployment data
 */
export interface ScaleUnitsResponse {
    /**
     * Deployment Data to deploy AzureStackHCI Cluster.
     */
    deploymentData: DeploymentDataResponse;
    /**
     * Solution builder extension (SBE) partner properties
     */
    sbePartnerInfo?: SbePartnerInfoResponse;
}
/**
 * scaleUnitsResponseProvideDefaults sets the appropriate defaults for ScaleUnitsResponse
 */
export function scaleUnitsResponseProvideDefaults(val: ScaleUnitsResponse): ScaleUnitsResponse {
    return {
        ...val,
        deploymentData: deploymentDataResponseProvideDefaults(val.deploymentData),
    };
}

/**
 * SDN Integration config to deploy AzureStackHCI Cluster.
 */
export interface SdnIntegrationResponse {
    /**
     * network controller config for SDN Integration to deploy AzureStackHCI Cluster.
     */
    networkController?: NetworkControllerResponse;
}

/**
 * Security compliance properties of the resource
 */
export interface SecurityComplianceStatusResponse {
    /**
     * Indicates whether data at-rest encryption is enabled on Azure Stack HCI clustered volumes.
     */
    dataAtRestEncrypted: string;
    /**
     * Indicates whether HCI cluster has data in-transit protection.
     */
    dataInTransitProtected: string;
    /**
     * Time in UTC when compliance status was last updated.
     */
    lastUpdated: string;
    /**
     * Indicates whether HCI hosts meets secured-core server requirements.
     */
    securedCoreCompliance: string;
    /**
     * Indicates whether HCI hosts have enforced consistent Windows Defender Application Control.
     */
    wdacCompliance: string;
}

/**
 * Service configuration details
 */
export interface ServiceConfigurationResponse {
    /**
     * The port on which service is enabled.
     */
    port: number;
    /**
     * Name of the service.
     */
    serviceName: string;
}

/**
 * Software Assurance properties of the cluster.
 */
export interface SoftwareAssurancePropertiesResponse {
    /**
     * TimeStamp denoting the latest SA benefit applicability is validated.
     */
    lastUpdated: string;
    /**
     * Customer Intent for Software Assurance Benefit.
     */
    softwareAssuranceIntent?: string;
    /**
     * Status of the Software Assurance for the cluster.
     */
    softwareAssuranceStatus: string;
}

/**
 * SSH configuration for Linux based VMs running on Azure
 */
export interface SshConfigurationResponse {
    /**
     * The list of SSH public keys used to authenticate with linux based VMs.
     */
    publicKeys?: SshPublicKeyResponse[];
}

/**
 * Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
 */
export interface SshPublicKeyResponse {
    /**
     * SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://learn.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
     */
    keyData?: string;
    /**
     * Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
     */
    path?: string;
}

/**
 * Progress representation of the update run steps.
 */
export interface StepResponse {
    /**
     * More detailed description of the step.
     */
    description?: string;
    /**
     * When the step reached a terminal state.
     */
    endTimeUtc?: string;
    /**
     * Error message, specified if the step is in a failed state.
     */
    errorMessage?: string;
    /**
     * Expected execution time of a given step. This is optionally authored in the update action plan and can be empty.
     */
    expectedExecutionTime?: string;
    /**
     * Completion time of this step or the last completed sub-step.
     */
    lastUpdatedTimeUtc?: string;
    /**
     * Name of the step.
     */
    name?: string;
    /**
     * When the step started, or empty if it has not started executing.
     */
    startTimeUtc?: string;
    /**
     * Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
     */
    status?: string;
    /**
     * Recursive model for child steps of this step.
     */
    steps?: StepResponse[];
}

/**
 * The StorageAdapter physical nodes of a cluster.
 */
export interface StorageAdapterIPInfoResponse {
    /**
     * The IPv4 address assigned to each storage adapter physical node on your Azure Stack HCI cluster.
     */
    ipv4Address: string;
    /**
     * storage adapter physical node name.
     */
    physicalNode: string;
    /**
     * The SubnetMask address assigned to each storage adapter physical node on your Azure Stack HCI cluster.
     */
    subnetMask: string;
}

/**
 * Storage container provisioning status
 */
export interface StorageContainerStatusProvisioningStatusResponse {
    /**
     * The ID of the operation performed on the storage container
     */
    operationId?: string;
    /**
     * The status of the operation performed on the storage container [Succeeded, Failed, InProgress]
     */
    status: string;
}

/**
 * The observed state of storage containers
 */
export interface StorageContainerStatusResponse {
    /**
     * Amount of space available on the disk in MB
     */
    availableSizeMB?: number;
    /**
     * Total size of the disk in MB
     */
    containerSizeMB?: number;
    /**
     * StorageContainer provisioning error code
     */
    errorCode?: string;
    /**
     * Descriptive error message
     */
    errorMessage?: string;
    /**
     * Storage container's provisioning status
     */
    provisioningStatus?: StorageContainerStatusProvisioningStatusResponse;
}

/**
 * The StorageNetworks of a cluster.
 */
export interface StorageNetworksResponse {
    /**
     * Name of the storage network.
     */
    name: string;
    /**
     * Name of the storage network adapter.
     */
    networkAdapterName: string;
    /**
     * List of Storage adapter physical nodes config to deploy AzureStackHCI Cluster.
     */
    storageAdapterIPInfo: StorageAdapterIPInfoResponse[];
    /**
     * ID specified for the VLAN storage network. This setting is applied to the network interfaces that route the storage and VM migration traffic. 
     */
    storageVlanId: string;
    /**
     * ID specified for the VLAN storage network. This setting is applied to the network interfaces that route the storage and VM migration traffic. 
     */
    vlanId?: string;
}

/**
 * The Storage config of AzureStackHCI Cluster.
 */
export interface StorageResponse {
    /**
     * By default, this mode is set to Express and your storage is configured as per best practices based on the number of nodes in the cluster. Allowed values are 'Express','InfraOnly', 'KeepStorage'
     */
    configurationMode?: string;
}
/**
 * storageResponseProvideDefaults sets the appropriate defaults for StorageResponse
 */
export function storageResponseProvideDefaults(val: StorageResponse): StorageResponse {
    return {
        ...val,
        configurationMode: (val.configurationMode) ?? "Express",
    };
}

/**
 * The ARM ID for a Network Interface.
 */
export interface SubnetIpConfigurationReferenceResponse {
    /**
     * The ARM ID for a Network Interface.
     */
    id?: string;
}

/**
 * Properties of the subnet.
 */
export interface SubnetResponse {
    /**
     * The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.
     */
    addressPrefix?: string;
    /**
     * List of address prefixes for the subnet.
     */
    addressPrefixes?: string[];
    /**
     * IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
     */
    ipAllocationMethod?: string;
    /**
     * IPConfigurationReferences - list of IPConfigurationReferences
     */
    ipConfigurationReferences?: SubnetIpConfigurationReferenceResponse[];
    /**
     * network associated pool of IP Addresses
     */
    ipPools?: IPPoolResponse[];
    /**
     * Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * NetworkSecurityGroup - Network Security Group attached to the logical network.
     */
    networkSecurityGroup?: NetworkSecurityGroupArmReferenceResponse;
    /**
     * Route table resource.
     */
    routeTable?: RouteTableResponse;
    /**
     * Vlan to use for the subnet
     */
    vlan?: number;
}

/**
 * List of switch details for edge device.
 */
export interface SwitchDetailResponse {
    /**
     * This represents extensions installed on virtualSwitch.
     */
    extensions: SwitchExtensionResponse[];
    /**
     * The name of the switch.
     */
    switchName: string;
    /**
     * The type of the switch. e.g. external, internal.
     */
    switchType: string;
}

/**
 * This represents extensions installed on virtualSwitch.
 */
export interface SwitchExtensionResponse {
    /**
     * This represents whether extension is enabled on virtualSwitch.
     */
    extensionEnabled: boolean;
    /**
     * This will show extension name for virtualSwitch.
     */
    extensionName: string;
    /**
     * Unique identifier for virtualSwitch.
     */
    switchId: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemDataResponse {
    /**
     * The timestamp of resource creation (UTC).
     */
    createdAt?: string;
    /**
     * The identity that created the resource.
     */
    createdBy?: string;
    /**
     * The type of identity that created the resource.
     */
    createdByType?: string;
    /**
     * The timestamp of resource last modification (UTC)
     */
    lastModifiedAt?: string;
    /**
     * The identity that last modified the resource.
     */
    lastModifiedBy?: string;
    /**
     * The type of identity that last modified the resource.
     */
    lastModifiedByType?: string;
}

/**
 * If update State is HasPrerequisite, this property contains an array of objects describing prerequisite updates before installing this update. Otherwise, it is empty.
 */
export interface UpdatePrerequisiteResponse {
    /**
     * Friendly name of the prerequisite.
     */
    packageName?: string;
    /**
     * Updatable component type.
     */
    updateType?: string;
    /**
     * Version of the prerequisite.
     */
    version?: string;
}

/**
 * User assigned identity properties
 */
export interface UserAssignedIdentityResponse {
    /**
     * The client ID of the assigned identity.
     */
    clientId: string;
    /**
     * The principal ID of the assigned identity.
     */
    principalId: string;
}

/**
 * Specifies the security profile settings for the managed disk. NOTE: It can only be set for Confidential VMs
 */
export interface VMDiskSecurityProfileResponse {
    /**
     * Specifies the EncryptionType of the managed disk. It is set to NonPersistedTPM for not persisting firmware state in the VMGuestState blob. NOTE: It can be set for only Confidential VMs.
     */
    securityEncryptionType?: string;
}

/**
 * The ARM ID for a Virtual Hard Disk.
 */
export interface VirtualHardDiskArmReferenceResponse {
    /**
     * The ARM ID for a Virtual Hard Disk.
     */
    id?: string;
}

/**
 * The download status of the virtual hard disk
 */
export interface VirtualHardDiskDownloadStatusResponse {
    /**
     * The downloaded sized of the virtual hard disk in MB
     */
    downloadedSizeInMB?: number;
    /**
     * The progress of the operation in percentage
     */
    progressPercentage?: number;
    /**
     * The status of Uploading virtual hard disk [Succeeded, Failed, InProgress]
     */
    status: string;
}

/**
 * VHD Status provisioning status
 */
export interface VirtualHardDiskStatusProvisioningStatusResponse {
    /**
     * The ID of the operation performed on the virtual hard disk
     */
    operationId?: string;
    /**
     * The status of the operation performed on the virtual hard disk [Succeeded, Failed, InProgress]
     */
    status: string;
}

/**
 * The observed state of virtual hard disks
 */
export interface VirtualHardDiskStatusResponse {
    /**
     * The download status of the virtual hard disk
     */
    downloadStatus?: VirtualHardDiskDownloadStatusResponse;
    /**
     * VirtualHardDisk provisioning error code
     */
    errorCode?: string;
    /**
     * Descriptive error message
     */
    errorMessage?: string;
    /**
     * Provisioning status of the vhd
     */
    provisioningStatus?: VirtualHardDiskStatusProvisioningStatusResponse;
    /**
     * The upload status of the virtual hard disk
     */
    uploadStatus?: VirtualHardDiskUploadStatusResponse;
}

/**
 * The upload status of the virtual hard disk
 */
export interface VirtualHardDiskUploadStatusResponse {
    /**
     * VirtualHardDisk upload error code
     */
    errorCode?: string;
    /**
     * Descriptive upload error message
     */
    errorMessage?: string;
    /**
     * The progress of the operation in percentage
     */
    progressPercentage?: number;
    /**
     * The status of Uploading virtual hard disk [Succeeded, Failed, InProgress]
     */
    status: string;
    /**
     * The uploaded sized of the virtual hard disk in MB
     */
    uploadedSizeInMB?: number;
}

/**
 * The instance view of the VM Config Agent running on the virtual machine.
 */
export interface VirtualMachineConfigAgentInstanceViewResponse {
    /**
     * The resource status information.
     */
    statuses?: InstanceViewStatusResponse[];
    /**
     * The VM Config Agent full version.
     */
    vmConfigAgentVersion?: string;
}

/**
 * The parameters of a managed disk.
 */
export interface VirtualMachineInstanceManagedDiskParametersResponse {
    /**
     * Specifies the security profile for the managed disk.
     */
    securityProfile?: VMDiskSecurityProfileResponse;
}

/**
 * Dynamic memory config
 */
export interface VirtualMachineInstancePropertiesHardwareProfileDynamicMemoryConfigResponse {
    /**
     * Maximum memory in MB
     */
    maximumMemoryMB?: number;
    /**
     * Minimum memory in MB
     */
    minimumMemoryMB?: number;
    /**
     * Defines the amount of extra memory that should be reserved for a virtual machine instance at runtime, as a percentage of the total memory that the virtual machine instance is thought to need. This only applies to virtual systems with dynamic memory enabled. This property can be in the range of 5 to 2000.
     */
    targetMemoryBuffer?: number;
}

/**
 * HardwareProfile - Specifies the hardware settings for the virtual machine instance.
 */
export interface VirtualMachineInstancePropertiesHardwareProfileResponse {
    /**
     * Dynamic memory config
     */
    dynamicMemoryConfig?: VirtualMachineInstancePropertiesHardwareProfileDynamicMemoryConfigResponse;
    /**
     * RAM in MB for the virtual machine instance
     */
    memoryMB?: number;
    /**
     * number of processors for the virtual machine instance
     */
    processors?: number;
    /**
     * virtualMachineGPUs - list of gpus to be attached to the virtual machine instance
     */
    virtualMachineGPUs?: VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPUResponse[];
    /**
     * Enum of VM Sizes
     */
    vmSize?: string;
}
/**
 * virtualMachineInstancePropertiesHardwareProfileResponseProvideDefaults sets the appropriate defaults for VirtualMachineInstancePropertiesHardwareProfileResponse
 */
export function virtualMachineInstancePropertiesHardwareProfileResponseProvideDefaults(val: VirtualMachineInstancePropertiesHardwareProfileResponse): VirtualMachineInstancePropertiesHardwareProfileResponse {
    return {
        ...val,
        vmSize: (val.vmSize) ?? "Default",
    };
}

/**
 * GPU properties - describes the GPU configuration.
 */
export interface VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPUResponse {
    /**
     * GPU assignment type
     */
    assignmentType: string;
    /**
     * Name of the GPU
     */
    gpuName?: string;
    /**
     * Size of gpu partition in MB for GPU-P
     */
    partitionSizeMB?: number;
}

/**
 * NetworkProfile - describes the network configuration the virtual machine instance
 */
export interface VirtualMachineInstancePropertiesNetworkProfileResponse {
    /**
     * NetworkInterfaces - list of network interfaces to be attached to the virtual machine instance
     */
    networkInterfaces?: NetworkInterfaceArmReferenceResponse[];
}

/**
 * LinuxConfiguration - linux specific configuration values for the virtual machine instance
 */
export interface VirtualMachineInstancePropertiesOsProfileLinuxConfigurationResponse {
    /**
     * DisablePasswordAuthentication - whether password authentication should be disabled
     */
    disablePasswordAuthentication?: boolean;
    /**
     * Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process.
     */
    provisionVMAgent?: boolean;
    /**
     * Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.
     */
    provisionVMConfigAgent?: boolean;
    /**
     * Specifies the ssh key configuration for a Linux OS.
     */
    ssh?: SshConfigurationResponse;
}
/**
 * virtualMachineInstancePropertiesOsProfileLinuxConfigurationResponseProvideDefaults sets the appropriate defaults for VirtualMachineInstancePropertiesOsProfileLinuxConfigurationResponse
 */
export function virtualMachineInstancePropertiesOsProfileLinuxConfigurationResponseProvideDefaults(val: VirtualMachineInstancePropertiesOsProfileLinuxConfigurationResponse): VirtualMachineInstancePropertiesOsProfileLinuxConfigurationResponse {
    return {
        ...val,
        provisionVMAgent: (val.provisionVMAgent) ?? true,
        provisionVMConfigAgent: (val.provisionVMConfigAgent) ?? true,
    };
}

/**
 * OsProfile - describes the configuration of the operating system and sets login data
 */
export interface VirtualMachineInstancePropertiesOsProfileResponse {
    /**
     * AdminUsername - admin username
     */
    adminUsername?: string;
    /**
     * ComputerName - name of the compute
     */
    computerName?: string;
    /**
     * LinuxConfiguration - linux specific configuration values for the virtual machine instance
     */
    linuxConfiguration?: VirtualMachineInstancePropertiesOsProfileLinuxConfigurationResponse;
    /**
     * Windows Configuration for the virtual machine instance
     */
    windowsConfiguration?: VirtualMachineInstancePropertiesOsProfileWindowsConfigurationResponse;
}
/**
 * virtualMachineInstancePropertiesOsProfileResponseProvideDefaults sets the appropriate defaults for VirtualMachineInstancePropertiesOsProfileResponse
 */
export function virtualMachineInstancePropertiesOsProfileResponseProvideDefaults(val: VirtualMachineInstancePropertiesOsProfileResponse): VirtualMachineInstancePropertiesOsProfileResponse {
    return {
        ...val,
        linuxConfiguration: (val.linuxConfiguration ? virtualMachineInstancePropertiesOsProfileLinuxConfigurationResponseProvideDefaults(val.linuxConfiguration) : undefined),
        windowsConfiguration: (val.windowsConfiguration ? virtualMachineInstancePropertiesOsProfileWindowsConfigurationResponseProvideDefaults(val.windowsConfiguration) : undefined),
    };
}

/**
 * Windows Configuration for the virtual machine instance
 */
export interface VirtualMachineInstancePropertiesOsProfileWindowsConfigurationResponse {
    /**
     * Whether to EnableAutomaticUpdates on the machine
     */
    enableAutomaticUpdates?: boolean;
    /**
     * Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process.
     */
    provisionVMAgent?: boolean;
    /**
     * Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.
     */
    provisionVMConfigAgent?: boolean;
    /**
     * Specifies the ssh key configuration for Windows OS.
     */
    ssh?: SshConfigurationResponse;
    /**
     * TimeZone for the virtual machine instance
     */
    timeZone?: string;
}
/**
 * virtualMachineInstancePropertiesOsProfileWindowsConfigurationResponseProvideDefaults sets the appropriate defaults for VirtualMachineInstancePropertiesOsProfileWindowsConfigurationResponse
 */
export function virtualMachineInstancePropertiesOsProfileWindowsConfigurationResponseProvideDefaults(val: VirtualMachineInstancePropertiesOsProfileWindowsConfigurationResponse): VirtualMachineInstancePropertiesOsProfileWindowsConfigurationResponse {
    return {
        ...val,
        provisionVMAgent: (val.provisionVMAgent) ?? true,
        provisionVMConfigAgent: (val.provisionVMConfigAgent) ?? true,
    };
}

/**
 * SecurityProfile - Specifies the security settings for the virtual machine instance.
 */
export interface VirtualMachineInstancePropertiesSecurityProfileResponse {
    /**
     * Enable TPM flag
     */
    enableTPM?: boolean;
    /**
     * Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType to function.
     */
    securityType?: string;
    /**
     * Uefi settings of the virtual machine instance
     */
    uefiSettings?: VirtualMachineInstancePropertiesSecurityProfileUefiSettingsResponse;
}
/**
 * virtualMachineInstancePropertiesSecurityProfileResponseProvideDefaults sets the appropriate defaults for VirtualMachineInstancePropertiesSecurityProfileResponse
 */
export function virtualMachineInstancePropertiesSecurityProfileResponseProvideDefaults(val: VirtualMachineInstancePropertiesSecurityProfileResponse): VirtualMachineInstancePropertiesSecurityProfileResponse {
    return {
        ...val,
        enableTPM: (val.enableTPM) ?? false,
        uefiSettings: (val.uefiSettings ? virtualMachineInstancePropertiesSecurityProfileUefiSettingsResponseProvideDefaults(val.uefiSettings) : undefined),
    };
}

/**
 * Uefi settings - Specifies whether secure boot should be enabled on the virtual machine instance.
 */
export interface VirtualMachineInstancePropertiesSecurityProfileUefiSettingsResponse {
    /**
     * Specifies whether secure boot should be enabled on the virtual machine instance.
     */
    secureBootEnabled?: boolean;
}
/**
 * virtualMachineInstancePropertiesSecurityProfileUefiSettingsResponseProvideDefaults sets the appropriate defaults for VirtualMachineInstancePropertiesSecurityProfileUefiSettingsResponse
 */
export function virtualMachineInstancePropertiesSecurityProfileUefiSettingsResponseProvideDefaults(val: VirtualMachineInstancePropertiesSecurityProfileUefiSettingsResponse): VirtualMachineInstancePropertiesSecurityProfileUefiSettingsResponse {
    return {
        ...val,
        secureBootEnabled: (val.secureBootEnabled) ?? false,
    };
}

/**
 * VHD to attach as OS disk
 */
export interface VirtualMachineInstancePropertiesStorageProfileOsDiskResponse {
    /**
     * The ARM ID for a Virtual Hard Disk.
     */
    id?: string;
    /**
     * The managed disk parameters.
     */
    managedDisk?: VirtualMachineInstanceManagedDiskParametersResponse;
    /**
     * This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: Windows, Linux.
     */
    osType?: string;
}

/**
 * StorageProfile - contains information about the disks and storage information for the virtual machine instance
 */
export interface VirtualMachineInstancePropertiesStorageProfileResponse {
    /**
     * adds data disks to the virtual machine instance
     */
    dataDisks?: VirtualHardDiskArmReferenceResponse[];
    /**
     * Which Image to use for the virtual machine instance
     */
    imageReference?: ImageArmReferenceResponse;
    /**
     * VHD to attach as OS disk
     */
    osDisk?: VirtualMachineInstancePropertiesStorageProfileOsDiskResponse;
    /**
     * Id of the storage container that hosts the VM configuration file
     */
    vmConfigStoragePathId?: string;
}

/**
 * Virtual machine instance provisioning status.
 */
export interface VirtualMachineInstanceStatusProvisioningStatusResponse {
    /**
     * The ID of the operation performed on the virtual machine instance
     */
    operationId?: string;
    /**
     * The status of the operation performed on the virtual machine instance [Succeeded, Failed, InProgress]
     */
    status: string;
}

/**
 * The observed state of virtual machine instances
 */
export interface VirtualMachineInstanceStatusResponse {
    /**
     * VirtualMachine provisioning error code
     */
    errorCode?: string;
    /**
     * Descriptive error message
     */
    errorMessage?: string;
    /**
     * The power state of the virtual machine instance
     */
    powerState?: string;
    /**
     * Provisioning status of the virtual machine instance
     */
    provisioningStatus?: VirtualMachineInstanceStatusProvisioningStatusResponse;
}

/**
 * The instance view of a virtual machine.
 */
export interface VirtualMachineInstanceViewResponse {
    /**
     * The VM Config Agent running on the virtual machine.
     */
    vmAgent?: VirtualMachineConfigAgentInstanceViewResponse;
}

export interface VirtualMachinePropertiesResponseDataDisks {
    /**
     * Resource ID of the data disk
     */
    id?: string;
}

export interface VirtualMachinePropertiesResponseDynamicMemoryConfig {
    maximumMemoryMB?: number;
    minimumMemoryMB?: number;
    /**
     * Defines the amount of extra memory that should be reserved for a virtual machine at runtime, as a percentage of the total memory that the virtual machine is thought to need. This only applies to virtual systems with dynamic memory enabled. This property can be in the range of 5 to 2000.
     */
    targetMemoryBuffer?: number;
}

/**
 * HardwareProfile - Specifies the hardware settings for the virtual machine.
 */
export interface VirtualMachinePropertiesResponseHardwareProfile {
    dynamicMemoryConfig?: VirtualMachinePropertiesResponseDynamicMemoryConfig;
    /**
     * RAM in MB for the virtual machine
     */
    memoryMB?: number;
    /**
     * number of processors for the virtual machine
     */
    processors?: number;
    vmSize?: string;
}
/**
 * virtualMachinePropertiesResponseHardwareProfileProvideDefaults sets the appropriate defaults for VirtualMachinePropertiesResponseHardwareProfile
 */
export function virtualMachinePropertiesResponseHardwareProfileProvideDefaults(val: VirtualMachinePropertiesResponseHardwareProfile): VirtualMachinePropertiesResponseHardwareProfile {
    return {
        ...val,
        vmSize: (val.vmSize) ?? "Default",
    };
}

/**
 * Which Image to use for the virtual machine
 */
export interface VirtualMachinePropertiesResponseImageReference {
    /**
     * Resource ID of the image
     */
    id?: string;
}

/**
 * LinuxConfiguration - linux specific configuration values for the virtual machine
 */
export interface VirtualMachinePropertiesResponseLinuxConfiguration {
    /**
     * DisablePasswordAuthentication - whether password authentication should be disabled
     */
    disablePasswordAuthentication?: boolean;
    /**
     * Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.
     */
    provisionVMAgent?: boolean;
    /**
     * SSH - contains settings related to ssh configuration
     */
    ssh?: VirtualMachinePropertiesResponseSsh;
}

export interface VirtualMachinePropertiesResponseNetworkInterfaces {
    /**
     * ID - Resource Id of the network interface
     */
    id?: string;
}

/**
 * NetworkProfile - describes the network configuration the virtual machine
 */
export interface VirtualMachinePropertiesResponseNetworkProfile {
    /**
     * NetworkInterfaces - list of network interfaces to be attached to the virtual machine
     */
    networkInterfaces?: VirtualMachinePropertiesResponseNetworkInterfaces[];
}

/**
 * VHD to attach as OS disk
 */
export interface VirtualMachinePropertiesResponseOsDisk {
    /**
     * Resource ID of the OS disk
     */
    id?: string;
}

/**
 * OsProfile - describes the configuration of the operating system and sets login data
 */
export interface VirtualMachinePropertiesResponseOsProfile {
    /**
     * AdminUsername - admin username
     */
    adminUsername?: string;
    /**
     * ComputerName - name of the compute
     */
    computerName?: string;
    /**
     * LinuxConfiguration - linux specific configuration values for the virtual machine
     */
    linuxConfiguration?: VirtualMachinePropertiesResponseLinuxConfiguration;
    /**
     * OsType - string specifying whether the OS is Linux or Windows
     */
    osType?: string;
    /**
     * Windows Configuration for the virtual machine 
     */
    windowsConfiguration?: VirtualMachinePropertiesResponseWindowsConfiguration;
}

export interface VirtualMachinePropertiesResponsePublicKeys {
    /**
     * KeyData - SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Li      nux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
     */
    keyData?: string;
    /**
     * Path - Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
     */
    path?: string;
}

export interface VirtualMachinePropertiesResponsePublicKeysPublicKeys {
    /**
     * KeyData - SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Li      nux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
     */
    keyData?: string;
    /**
     * Path - Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
     */
    path?: string;
}

/**
 * SecurityProfile - Specifies the security settings for the virtual machine.
 */
export interface VirtualMachinePropertiesResponseSecurityProfile {
    enableTPM?: boolean;
    uefiSettings?: VirtualMachinePropertiesResponseUefiSettings;
}
/**
 * virtualMachinePropertiesResponseSecurityProfileProvideDefaults sets the appropriate defaults for VirtualMachinePropertiesResponseSecurityProfile
 */
export function virtualMachinePropertiesResponseSecurityProfileProvideDefaults(val: VirtualMachinePropertiesResponseSecurityProfile): VirtualMachinePropertiesResponseSecurityProfile {
    return {
        ...val,
        enableTPM: (val.enableTPM) ?? false,
        uefiSettings: (val.uefiSettings ? virtualMachinePropertiesResponseUefiSettingsProvideDefaults(val.uefiSettings) : undefined),
    };
}

/**
 * SSH - contains settings related to ssh configuration
 */
export interface VirtualMachinePropertiesResponseSsh {
    /**
     * PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.
     */
    publicKeys?: VirtualMachinePropertiesResponsePublicKeys[];
}

/**
 * SSH Configuration
 */
export interface VirtualMachinePropertiesResponseSshSsh {
    /**
     * PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.
     */
    publicKeys?: VirtualMachinePropertiesResponsePublicKeysPublicKeys[];
}

/**
 * StorageProfile - contains information about the disks and storage information for the virtual machine
 */
export interface VirtualMachinePropertiesResponseStorageProfile {
    /**
     * adds data disks to the virtual machine
     */
    dataDisks?: VirtualMachinePropertiesResponseDataDisks[];
    /**
     * Which Image to use for the virtual machine
     */
    imageReference?: VirtualMachinePropertiesResponseImageReference;
    /**
     * VHD to attach as OS disk
     */
    osDisk?: VirtualMachinePropertiesResponseOsDisk;
    /**
     * Id of the storage container that hosts the VM configuration file
     */
    vmConfigStoragePathId?: string;
}

export interface VirtualMachinePropertiesResponseUefiSettings {
    /**
     * Specifies whether secure boot should be enabled on the virtual machine.
     */
    secureBootEnabled?: boolean;
}
/**
 * virtualMachinePropertiesResponseUefiSettingsProvideDefaults sets the appropriate defaults for VirtualMachinePropertiesResponseUefiSettings
 */
export function virtualMachinePropertiesResponseUefiSettingsProvideDefaults(val: VirtualMachinePropertiesResponseUefiSettings): VirtualMachinePropertiesResponseUefiSettings {
    return {
        ...val,
        secureBootEnabled: (val.secureBootEnabled) ?? false,
    };
}

/**
 * Windows Configuration for the virtual machine 
 */
export interface VirtualMachinePropertiesResponseWindowsConfiguration {
    /**
     * Whether to EnableAutomaticUpdates on the machine
     */
    enableAutomaticUpdates?: boolean;
    /**
     * Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.
     */
    provisionVMAgent?: boolean;
    /**
     * SSH Configuration
     */
    ssh?: VirtualMachinePropertiesResponseSshSsh;
    /**
     * TimeZone for the virtual machine
     */
    timeZone?: string;
}

/**
 * The observed state of virtual machines
 */
export interface VirtualMachineStatusResponse {
    /**
     * VirtualMachine provisioning error code
     */
    errorCode?: string;
    /**
     * Descriptive error message
     */
    errorMessage?: string;
    /**
     * The power state of the virtual machine
     */
    powerState?: string;
    provisioningStatus?: VirtualMachineStatusResponseProvisioningStatus;
}

export interface VirtualMachineStatusResponseProvisioningStatus {
    /**
     * The ID of the operation performed on the virtual machine
     */
    operationId?: string;
    /**
     * The status of the operation performed on the virtual machine [Succeeded, Failed, InProgress]
     */
    status?: string;
}

/**
 * DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
 */
export interface VirtualNetworkPropertiesResponseDhcpOptions {
    /**
     * The list of DNS servers IP addresses.
     */
    dnsServers?: string[];
}

/**
 * IPConfigurationReference - Describes a IPConfiguration under the virtual network
 */
export interface VirtualNetworkPropertiesResponseIpConfigurationReferences {
    /**
     * IPConfigurationID
     */
    id?: string;
}

/**
 * RouteTable for the subnet
 */
export interface VirtualNetworkPropertiesResponseRouteTable {
    /**
     * Etag - Gets a unique read-only string that changes whenever the resource is updated.
     */
    id?: string;
    /**
     * Name - READ-ONLY; Resource name.
     */
    name?: string;
    /**
     * Routes - Collection of routes contained within a route table.
     */
    routes?: VirtualNetworkPropertiesResponseRoutes[];
    /**
     * Type - READ-ONLY; Resource type.
     */
    type?: string;
}

/**
 * Route is associated with a subnet.
 */
export interface VirtualNetworkPropertiesResponseRoutes {
    /**
     * AddressPrefix - The destination CIDR to which the route applies.
     */
    addressPrefix?: string;
    /**
     * Name - name of the subnet
     */
    name?: string;
    /**
     * NextHopIPAddress - The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
     */
    nextHopIpAddress?: string;
}

/**
 * Subnet subnet in a virtual network resource.
 */
export interface VirtualNetworkPropertiesResponseSubnets {
    /**
     * Cidr for this subnet - IPv4, IPv6
     */
    addressPrefix?: string;
    /**
     * AddressPrefixes - List of address prefixes for the subnet.
     */
    addressPrefixes?: string[];
    /**
     * IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
     */
    ipAllocationMethod?: string;
    /**
     * IPConfigurationReferences - list of IPConfigurationReferences
     */
    ipConfigurationReferences?: VirtualNetworkPropertiesResponseIpConfigurationReferences[];
    /**
     * Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
     */
    name?: string;
    /**
     * RouteTable for the subnet
     */
    routeTable?: VirtualNetworkPropertiesResponseRouteTable;
    /**
     * Vlan to use for the subnet
     */
    vlan?: number;
}

/**
 * The observed state of virtual networks
 */
export interface VirtualNetworkStatusResponse {
    /**
     * VirtualNetwork provisioning error code
     */
    errorCode?: string;
    /**
     * Descriptive error message
     */
    errorMessage?: string;
    provisioningStatus?: VirtualNetworkStatusResponseProvisioningStatus;
}

export interface VirtualNetworkStatusResponseProvisioningStatus {
    /**
     * The ID of the operation performed on the virtual network
     */
    operationId?: string;
    /**
     * The status of the operation performed on the virtual network [Succeeded, Failed, InProgress]
     */
    status?: string;
}

/**
 * The VirtualSwitchConfigurationOverrides of a cluster.
 */
export interface VirtualSwitchConfigurationOverridesResponse {
    /**
     * Enable IoV for Virtual Switch
     */
    enableIov: string;
    /**
     * Load Balancing Algorithm for Virtual Switch
     */
    loadBalancingAlgorithm: string;
}

/**
 * The credentials used to login to the image repository that has access to the specified image
 */
export interface VmImageRepositoryCredentialsResponse {
    /**
     * Password for accessing image repository
     */
    password: string;
    /**
     * Username for accessing image repository
     */
    username: string;
}
